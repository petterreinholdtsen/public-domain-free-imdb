#!/usr/bin/env python

"""
Fetch list of movies available from RetroFilmVault.  All their movies
are claimed to be in the public domain.

Look up each title + year in IMDB and if only one title is returned
with the correct year, assume it is the correct IMDB title ID for
the movie.

Question: How does these two links add up?
http://www.motherjones.com/politics/2013/08/mlk-intellectual-property-problems/
https://retrofilmvault.com/listings/martin-luther-king-i-have-a-dream-1963/

"""

import argparse
import datetime
import json
import lxml.html
import movielib
import re
import urllib
import urllib2
import urlparse

def fetch_movie_info(entryurl):
    try:
        root = lxml.html.fromstring(movielib.http_get_read(entryurl))
    except urllib2.HTTPError as e:
        return None
    retval = {}
    cps = root.cssselect("div#content p")
    if cps:
        title = root.cssselect("h1")[0].text_content().strip()
        retval['title'] = title
        stars = cps[0].text_content()
        info = cps[1].text_content()
        print info
        retval['stars'] = stars
        retval['info'] = info
        m = re.search("^(.+) (\d+)$", info)
        if m:
            retval['year'] = int(m.group(2))
    else:
        y = root.cssselect("tr.listing_category_year td")
        if y:
            year = y[1].text_content()
            retval['year'] = int(year)
        c = root.cssselect("tr.listing_category_public-domain-movie-category td")[1].text_content()
        retval['category'] = c
    return retval

def fetch_movie_list(args, l, url, name):
    try:
        root = lxml.html.fromstring(movielib.http_get_read(url))
    except urllib2.HTTPError as e:
        return None
    for a in root.cssselect("a[href]"):
        entryurl = urlparse.urljoin(url, a.attrib['href'])
        if is_in_list(l, entryurl):
            continue
        title = a.text_content()
        print entryurl
        info = fetch_movie_info(entryurl)
        if not info:
            print("error: found broken link %s" % entryurl)
        #print info
        imdb = None
        if info and 'year' in info:
            year = info['year']
        else:
            year = None
        entry = {
            'status' : 'free',
            'freenessurl' : [entryurl],
            'title' : title,
            'updated' : datetime.datetime.now().isoformat(),
        }
        if args.imdblookup:
            imdb = movielib.imdb_find_one(title, year)
            if imdb:
                entry['imdblookup'] = '%s %d' % (title, year)
        if not imdb:
            imdb = entryurl
        if year:
            entry['year'] = year
        if imdb not in l:
            l[imdb] = entry
        else:
            if entryurl not in l[imdb]['freenessurl']:
                l[imdb]['freenessurl'].append(entryurl)
            for f in ['updated', 'imdblookup']:
                if f in entry:
                    l[imdb][f] = entry[f]
        print(imdb, l[imdb])
        movielib.savelist(l, name=name)
    return l

def is_in_list(list, url):
    for e in list:
        if url in list[e]['freenessurl']:
            return True
    return False

def loadlist(l, path):
    try:
        with open(path, 'rt') as input:
            n = json.load(input)
            for id in n.keys():
                freenessurl = []
                for field in ['freenessurl', 'freenessurl2', 'freenessurl3',
                              'freenessurl4']:
                    if field in n[id] and n[id][field] not in freenessurl:
                        freenessurl.append(n[id][field])
                        del n[id][field]
                n[id]['freenessurl'] = freenessurl
                if not id in l:
                    l[id] = n[id]
                else:
                    for url in n[id]['freenessurl']:
                        if url not in l[id]['freenessurl']:
                            l[id]['freenessurl'].append(url)
        return l
    except IOError as e:
        return l

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--imdblookup', action='store_true', default=False,
                        help='also find title IDs by searching for title/year in IMDB')
    args = parser.parse_args()
    url = "https://retrofilmvault.com/publicdomainfilms/"
    path='free-movies-retrofilmvault.json'
    outlist = {}
    outlist = loadlist(outlist, path)
    outlist = fetch_movie_list(args, outlist, url, name=path)
    
    # Rewrite freenessurl array to individual fields (freenessurl,
    # freenessurl2, freenessurl3...) in predictable/sorted order
    for i in outlist:
        if 1 == len(outlist[i]['freenessurl']):
            outlist[i]['freenessurl'] = outlist[i]['freenessurl'][0]
        else:
            sl = sorted(outlist[i]['freenessurl'])
            outlist[i]['freenessurl'] = sl[0]
            seq = 0
            for u in sl[1:]:
                field = "freenessurl%d" % (seq + 2)
                outlist[i][field] = u
                seq = seq + 1
                
    movielib.savelist(outlist, name=path)

if __name__ == '__main__':
    main()
