#!/usr/bin/env python

"""
Fetch list of movies available from RetroFilmVault.  All their movies
are claimed to be in the public domain.

Look up each title +year in IMDB and if only one title is returned,
assume it is the correct IMDB title ID for the movie.

Question: How does these two links add up?
http://www.motherjones.com/politics/2013/08/mlk-intellectual-property-problems/
https://retrofilmvault.com/listings/martin-luther-king-i-have-a-dream-1963/

"""

import argparse
import datetime
import json
import lxml.html
import movielib
import re
import urllib
import urllib2
import urlparse

def fetch_movie_info(entryurl):
    try:
        root = lxml.html.fromstring(movielib.http_get_read(entryurl))
    except urllib2.HTTPError as e:
        return None
    retval = {}
    cps = root.cssselect("div#content p")
    if cps:
        title = root.cssselect("h1")[0].text_content().strip()
        retval['title'] = title
        stars = cps[0].text_content()
        info = cps[1].text_content()
        print info
        retval['stars'] = stars
        retval['info'] = info
        m = re.search("^(.+) (\d+)$", info)
        if m:
            retval['year'] = int(m.group(2))
    else:
        y = root.cssselect("tr.listing_category_year td")
        if y:
            year = y[1].text_content()
            retval['year'] = int(year)
        c = root.cssselect("tr.listing_category_public-domain-movie-category td")[1].text_content()
        retval['category'] = c
    return retval

def is_in_list(list, url):
    for e in list:
        if url == list[e]['freenessurl']:
            return True
    return False
    
def fetch_movie_list(args, list, url, name):
    try:
        root = lxml.html.fromstring(movielib.http_get_read(url))
    except urllib2.HTTPError as e:
        return None
    for a in root.cssselect("a[href]"):
        entryurl = urlparse.urljoin(url, a.attrib['href'])
        if is_in_list(list, entryurl):
            continue
        title = a.text_content()
        print entryurl
        info = fetch_movie_info(entryurl)
        if not info:
            print("error: found broken link %s" % entryurl)
        #print info
        imdb = None
        if info and 'year' in info:
            year = info['year']
            if args.imdblookup:
                imdb = movielib.imdb_find_one(title, year)
        else:
            year = None
        if not imdb:
            imdb = entryurl
        list[imdb] = {
            'status' : 'free',
            'freenessurl' : entryurl,
            'title' : title,
            'updated' : datetime.datetime.now().isoformat(),
            }
        if year:
            list[imdb]['year'] = year
        print(imdb, list[imdb])
        movielib.savelist(list, name=name)
    return list

def loadlist(path):
    try:
        with open(path, 'rt') as input:
            return json.load(input)
    except IOError as e:
        return {}

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--imdblookup', action='store_true', default=False,
                        help='also find title IDs by searching for title/year in IMDB')
    args = parser.parse_args()
    url = "https://retrofilmvault.com/publicdomainfilms/"
    path='free-movies-retrofilmvault.json'
    l = loadlist(path)
    l = fetch_movie_list(args, l, url, name=path)
    movielib.savelist(l, name=path)

if __name__ == '__main__':
    main()
