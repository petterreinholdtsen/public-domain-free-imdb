#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Extract IMDB IDs of movies listed as in the public domain on
www.publicdomainmoves.net.
"""

import json
import lxml.html
import movielib
import re
import urllib2
import urlparse

urlbase = 'http://publicdomainmovie.net/?page=%d'
#urlbase = 'http://publicdomainmovies.net/cartoons?page=%d'
#http://publicdomainmovies.net/movie/million-dollar-weekend-0

def get_movie_info(entryurl, title):
    try:
        root = lxml.html.fromstring(movielib.http_get_read(entryurl))
    except urllib2.HTTPError as e:
        return None, None
    #print entryurl
    # title is also "div.field-item h2"
    ytag = root.cssselect("span.date-display-single")
    if ytag:
        year = int(ytag[0].text_content())
    else:
        m = re.search("\((\d\d\d\d)\)$", title)
        if m:
            year = int(m.group(1))
        else:
            year = None
    for a in root.cssselect("div.content a[href]"):
        #print a.attrib['href'], a.attrib['href'].find("imdb")
        if -1 != a.attrib['href'].find("imdb.com"):
            imdburl = a.attrib['href']
            imdburl = imdburl.replace('/imdb.com/', '/www.imdb.com/')
            imdburl = imdburl.replace('/us.imdb.com/', '/www.imdb.com/')
            imdburl = imdburl.split('?')[0]
            imdburl = imdburl.replace('/plotsummary', '/')
            imdburl = imdburl.replace('/combined', '/')
            imdburl = imdburl.replace('/fullcredits', '/')
            if '/' != imdburl[-1]:
                imdburl = imdburl + '/'
            #print imdburl
            return imdburl, year
    print("Unable to find IMDB id for %s, searching in IDMB" % entryurl)
    try:
        imdb = movielib.imdb_find_one(title, year)
        if imdb:
            return imdb, year
    except KeyError: # hit this with mojobake and UTF-8 in 'Spring in a Small Town (小城之春)')
        pass

    return entryurl, year

def get_last_page():
    summaryurl = urlbase % 1
    try:
        root = lxml.html.fromstring(movielib.http_get_read(summaryurl))
    except urllib2.HTTPError as e:
        return None
    lastref = root.cssselect("ul li.pager-last a")
    if lastref:
        last = lastref[0].attrib['href'].replace('/home?page=', '')
        return int(last)
    
def get_movie_list(l, page=1):
    summaryurl = urlbase % page
    print summaryurl
    try:
        root = lxml.html.fromstring(movielib.http_get_read(summaryurl))
    except urllib2.HTTPError as e:
        return "n/a"
    count = 0
    for div in root.cssselect("div.view-content div.cover"):
        a = div.cssselect("a")[0]
        title = div.cssselect("div.info b")[0].text_content()
        if -1 != a.attrib['href'].find("/movie/"):
            entryurl = urlparse.urljoin(summaryurl, a.attrib['href'])
            e, year = get_movie_info(entryurl, title)
            if e:
                l[e] = {
                    'status' : 'free',
                    'freenessurl' : entryurl,
                    'title' : title,
                }
                if year:
                    l[e]['year'] = year
                count = count + 1
    return count

def main():
    path = 'free-movies-publicdomainmovies-net.json'
    l = {}
    page = 1
    lastpage = get_last_page()
    while 0 < get_movie_list(l, page=page):
        page = page + 1
        movielib.savelist(l, path)
        if page > lastpage:
            break
    movielib.savelist(l, path)

if __name__ == '__main__':
    main()
