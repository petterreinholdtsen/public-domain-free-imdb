#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Slå opp informasjon om norske filmer på IMDB og forsøk å beregne
på om en film er falt i det fri i norge basert på dødspunkt for
aktuelle personer involvert.

Tillat overstyring av dødsår fra lokal fil, for personer IMDB ikke
vet når døde.

Filmer faller i det fri 70 år etter døden til lengstlevende av
hovedregissøren, manusforfatteren, dialogforfatteren og komponisten
av filmmusikken.  Utfordringen er å finne ut hvem de var og når de døde.
"""

import datetime
import json
import lxml.html
import movielib
import time
import urlparse

vernetid = 70 # år
thisyear = datetime.datetime.now().year

# Make sure we only look up a person once per run
personcache = {}

def loadinfo(path):
    with open(path, 'rt') as input:
        return json.load(input)

def fetch_person_info(personurl):
    global personcache
    if personurl in personcache:
        return personcache[personurl]
    print personurl
    html = movielib.http_get_read(personurl)
    root = lxml.html.fromstring(html)
    name = root.cssselect("h1.header span.itemprop")[0].text_content()
    info = {
        'name': name,
        'imdb' : personurl,
    }
    deadlist = root.cssselect("div#name-death-info time[datetime]")
    if deadlist:
        deathyear = int(deadlist[0].attrib['datetime'].split("-")[0])
        info['dead'] = deathyear
    else:
        info['deathmissing'] = True
    personcache[personurl] = info
    return info

def fetch_title_info(titleurl):
    # might consider using http://www.imdb.com/title/tt0011440/fullcredits
    html = movielib.http_get_read(titleurl)
    root = lxml.html.fromstring(html)
    titleinfo = {}
    # Should consider main director, manus writer, dialog writer and
    # composer of the film music according to norwegian regulations.
    # FIXME Only main director and manus writer is available from
    # title page.  Find source for the rest.
    for contributor in ['director', 'creator']:
        for a in root.cssselect("div.credit_summary_item span[itemprop=%s] a[href]" % contributor):
            url = urlparse.urljoin(titleurl, a.attrib['href'].split('?')[0])
            info = fetch_person_info(url)
            #print info
            titleinfo[contributor] = info
    return titleinfo

def fetch_search_result(entries, urlbase, page):
    count = 0
    url = urlbase % page
    print url
    html = movielib.http_get_read(url)
    root = lxml.html.fromstring(html)
    for h in root.cssselect("div.lister-item-content h3.lister-item-header "):
        t = h.cssselect("a[href]")
        if t:
            ta = t[0].cssselect("a")[0]
            imdburl = urlparse.urljoin(url, ta.attrib['href'].split('?')[0])
            title = t[0].text_content().strip()
            y = h.cssselect("span.lister-item-year")
            year = y[0].text_content().translate(None, '()I ')
            print imdburl, year, title
            titleinfo = fetch_title_info(imdburl)
            titleinfo['title'] = title
            if '' != year:
                titleinfo['year'] = int(year)
            lastdeath = 0
            for c in ['director', 'creator']:
                if c in titleinfo and 'dead' in titleinfo[c]:
                    if lastdeath < titleinfo[c]['dead']:
                        lastdeath = titleinfo[c]['dead']
            if 0 != lastdeath and lastdeath + vernetid <= thisyear:
                titleinfo['status'] = 'expirecandidate'
            else:
                titleinfo['status'] = 'unknown'
            entries[imdburl] = titleinfo
            print titleinfo
            count = count + 1
    next = root.cssselect("a.lister-page-next")
    if next:
        return True
    return False

def main():
    global personcache
    personcache = loadinfo("author-deaths.json")
    entries = {}
    # oldest norwegian movie in IMDB is from 1907
    for y in xrange(1907, thisyear - vernetid):
        urlbase = "http://www.imdb.com/search/title?country_of_origin=no&year=%d&page=%%s" % y
        page = 1
        while fetch_search_result(entries, urlbase, page):
            page = page + 1
        movielib.savelist(entries, name="free-movies-imdb-c-expired-no.json")
        time.sleep(10) # avoid overloading IMDB

if __name__ == '__main__':
    main()
