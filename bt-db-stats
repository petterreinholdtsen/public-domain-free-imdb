#!/usr/bin/env python
#
# Analyzing the content of the directory service used by
# <URL: https://popcorntime-online.tv/ >
# http://www.prattlibrary.org/locations/sightsandsounds/index.aspx?id=5661
# https://www.omdbapi.com/ and http://linkedmdb.org/ (RDF)

__author__ = "Petter Reinholdtsen <pere@hungry.com>"

import json
import lxml.html
import random
import urllib2
import time

def load_free_status(free_status, name = None):
    if name is None:
        name = "free-movies-archive-org-wikidata.json"
    f = open(name)
    s = json.load(f)
    f.close()
    for imdburl in s.keys():
        if not 0 < imdburl.find("imdb.com"):
            continue
        if imdburl in free_status:
            for k in s[imdburl].keys():
                free_status[imdburl][k] = s[imdburl][k]
        else:
            free_status[imdburl] = s[imdburl]
    return free_status

def load_dalechall():
    f = open("DaleChallEasyWordList.txt")
    simplewords = f.read().splitlines()
    f.close
    return simplewords

def loadyears():
    try:
        with open('imdbyears.json', 'rt') as input:
            return json.load(input)
    except IOError as e:
        return {}

def saveyears(years):
    with open('imdbyears.json', 'wt') as out:
        res = json.dump(years,
                        out,
                        sort_keys=True,
                        indent=4,
                        separators=(',', ': '))
def movieyear(imdburl):
    """
Scrape movie year for a given IMDB ID / URL.

If no year is found, it might refer to a TV serie episode.
"""
    global imdbyears
    if imdburl in imdbyears:
        return imdbyears[imdburl]
    opener = urllib2.build_opener()
    opener.addheaders = [('User-Agent', 'curl/7.52.1')]
    try:
        f = opener.open(imdburl)
    except urllib2.HTTPError as e:
        return "n/a"
    root = lxml.html.fromstring(f.read())
    ys = root.cssselect("span#titleYear a")
    if ys:
        year = ys[0].text_content()
        imdbyears[imdburl] = int(year)
        return year
    else:
        return "n/a"

def jsonget_apidomain(page = 1, keywords = None):
    """
Fetch page from directory API used by popcorntime-online.tv
"""
    cb="0.7737132348094038"
    url = 'https://api.apidomain.info/list?sort=seeds&cb=%s&quality=720p,1080p,3d&page=%d' % (cb, page)
    if keywords:
        url = url + "&keywords=%s" % keywords
    opener = urllib2.build_opener()
    opener.addheaders = [('User-Agent', 'curl/7.52.1')]
    f = opener.open(url)
    if f.getcode() == 200:
        j = json.load(f)
        return j["MovieList"]
    else:
        raise Exception()

def jsonget_ukrfnlge(page = 1, keywords = None):
    url = "https://api.ukfrnlge.xyz/?page=%d" % page
    if keywords:
        url = url + "&keywords=%s" % keywords
    opener = urllib2.build_opener()
    opener.addheaders = [('User-Agent', 'curl/7.52.1')]
    f = opener.open(url)
    if f.getcode() == 200:
        j = json.load(f)
        return j["MovieList"]
    else:
        raise Exception()

# Alternative directory: https://yts.ag/api/v2/list_movies.json?page=325
def jsonget_yts(page = 1, keywords = None):
    url = "https://yts.ag/api/v2/list_movies.json?sort_by=seeds"
    #url = "http://yify.is/api/v2/list_movies.json?sort_by=seeds"
    if page != 1:
        url = url + "&page=%d" % page
    if keywords:
        url = url + "&query_term=%s" % keywords
    #print url
    opener = urllib2.build_opener()
    opener.addheaders = [('User-Agent', 'curl/7.52.1')]
    f = opener.open(url)
    if f.getcode() == 200:
        j = json.load(f)
        #print j
        if 'movies' in j['data']:
            return j['data']['movies']
        else:
            return []
    else:
        raise Exception()
 
# Usung https://movies-v2.api-fetch.website/movies documented on
# http://docs.popcornofficial.apiary.io/ and used by client available
# from https://www.popcorntime.sh
def jsonget_sh(page = 1, keywords = None):
    url = "https://tv-v2.api-fetch.website/movies/%d?sort=last%%20added&order=-1" % page
    if keywords:
        url = url + "&keywords=%s" % keywords
    print url
    opener = urllib2.build_opener()
    opener.addheaders = [('User-Agent', 'curl/7.52.1')]
    f = opener.open(url)
    if f.getcode() == 200:
        j = json.load(f)
        #print j
        return j
    else:
        raise Exception()

def addentries(titles, l):
    global years
    global yearsfree
    global free_status
    for e in l:
        if 'imdb' in e:
            imdbfield = 'imdb'
        elif 'imdb_id' in e:
            imdbfield = 'imdb_id'
        else:
            imdbfield = 'imdb_code'
        imdburl = 'http://www.imdb.com/title/%s/' % e[imdbfield]
        year = e['year'] # movieyear(imdburl)
        if year is not None:
            year = int(year)
            if 0 == year:
                year = None
        if year not in years:
            years[year] = 0
            yearsfree[year] = 0
        years[year] = years[year] + 1
        if imdburl in free_status and \
           'status' in free_status[imdburl] and \
           "free" == free_status[imdburl]['status']:
            yearsfree[year] = yearsfree[year] + 1
        elif 0 < year and year < 1940: # FIXME remove once wikipedia is updated
            print "Nonfree?", imdburl, year
        title = {
            'title' : e['title'],
            'imdburl' : imdburl,
            'imdb' : e[imdbfield],
            'year' : year,
        }
        if not title in titles:
            titles.append(title)

def download_titles(titles, keyword):
    total = 0
    page = 0
    try:
        while True:
            page = page + 1
            #l = jsonget_apidomain(page, keyword)
            l = jsonget_yts(page, keyword)
            #l = jsonget_sh(page, keyword)
            #l = jsonget_ukrfnlge(page, keyword)
            s = len(l)
            if 0 < s:
                total = total + len(l)
                addentries(titles, l)
                time.sleep(1)
            else:
                break
#    except Exception as e:
#        print("Exception: ")
#        print(e)
    finally:
        print("Total: %d "% total)
    return titles

free_status = {}
free_status = load_free_status(free_status, "free-movies-manual.json")
free_status = load_free_status(free_status, "free-movies-vodo.json")
free_status = load_free_status(free_status, "free-movies-imdb-pd.json")
free_status = load_free_status(free_status, "free-movies-archive-org.json")
free_status = load_free_status(free_status, "free-movies-archive-org-butter.json")
free_status = load_free_status(free_status, "free-movies-publicdomaintorrents.json")
free_status = load_free_status(free_status, "free-movies-icheckmovies-archive-mochard.json")

print("info: Know about %d movies in IMDB that are likely legal to distribute on the Internet." % len(free_status))

years = {}
yearsfree = {}
imdbyears = loadyears()

simplewords = load_dalechall()
somesimplewords = random.sample(simplewords, 50)
keyword = somesimplewords[0]
# Fetch all entries
keyword = None

print("searching for %s" % keyword)
titles = []
titles = download_titles(titles, keyword)

saveyears(imdbyears)

total = len(titles)
subset  = 100
if total < subset:
    subset = total

free = 0
nonfree = 0
unknown = 0
for s in random.sample(titles, subset):
    imdburl = s['imdburl']
    year = s['year']
    status = "?"
    if imdburl in free_status:
        if 'status' in free_status[imdburl]:
            if "free" == free_status[imdburl]['status']:
                free = free + 1
                status = "v"
            else:
                nonfree = nonfree + 1
                status = "-"
        else:
            unknown = unknown + 1
    else:
        unknown = unknown + 1
    print status, year, s['title'], imdburl
    

print("total %d free, %d non-free, %d unknown of %d"
      % (free, nonfree, unknown, subset))

t = 0
tf = 0
c = {}
cf = {}
thisyear = 2017 # FIXME
for y in sorted(years):
    if y is None:
        ys = 'n/a'
        range = 0
    elif y > thisyear:
        ys = 'future'
        range = 9990
    else:
        ys = str(y)
        range = int(y/10)*10
    print("%s %5d %3d (%4.1f)" % (ys, years[y], yearsfree[y], 100.0 * yearsfree[y] / years[y]))
    
    if range not in c:
        c[range] = 0
        cf[range] = 0
    c[range] = c[range] + years[y]
    cf[range] = cf[range] + yearsfree[y]
    t = t + years[y]
    tf = tf + yearsfree[y]

print("Summary:")

for y in sorted(c):
    if 0 == y:
        range = 'n/a'
    else:
        range = "%d-%02d" % (y, (y+9)%100)
    print("%7s %5d %3d (%4.1f)" % (range, c[y], cf[y], 100.0 * cf[y] / c[y]))

if 0 < t:
    print("Sum:    %5d %3d (%4.1f)" % ( t, tf, (100.0 * tf / t)))
